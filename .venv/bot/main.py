import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
from datetime import datetime
import sqlite3
import asyncio
import platform

from calendar_service import CalendarService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

DB_NAME = 'studio_bot.db'
SERVICE, DATE, TIME, NAME, PHONE = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = 'studio_bot.db'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']
SERVICE_ACCOUNT_FILE = 'service-account.json'
CALENDAR_ID = 'e399d5723974c68bc61d920cbf33537561feaaa765a2ce64f02182b9d0207431@group.calendar.google.com'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
calendar_service = CalendarService(
    service_account_file=SERVICE_ACCOUNT_FILE,
    calendar_id=CALENDAR_ID,
    scopes=SCOPES
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            service_type TEXT,
            date TEXT,
            time TEXT,
            name TEXT,
            phone TEXT,
            is_paid BOOLEAN DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –ü–æ–∫–∞–∑ –º–µ–Ω—é
async def show_main_menu(update: Update):
    keyboard = [
        ['üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç'],
        ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'üí≥ –û–ø–ª–∞—Ç–∞'],
        ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ]
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_main_menu(update)

# –ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    events = await calendar_service.get_events()
    if not events:
        await update.message.reply_text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
        await show_main_menu(update)
        return

    response = "üïí *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤:*\n\n"
    for event in events:
        start = event['start'].get('dateTime', event['start'].get('date'))
        end = event['end'].get('dateTime', event['end'].get('date'))
        response += (
            f"üìÖ *{event['summary']}*\n"
            f"üïë {start} - {end}\n"
            f"{event.get('description', '')}\n\n"
        )

    await update.message.reply_text(response, parse_mode='Markdown')
    await show_main_menu(update)

# –ü–æ–∫–∞–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    prices = """
üí∞ *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:*

- –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å (1 —á–∞—Å): 1500 —Ä—É–±.
- –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ (1 —á–∞—Å): 800 —Ä—É–±.
- –ì–æ–Ω—á–∞—Ä–Ω—ã–π –∫—É—Ä—Å (5 –∑–∞–Ω—è—Ç–∏–π): 6000 —Ä—É–±.
    """
    await update.message.reply_text(prices, parse_mode='Markdown')
    await show_main_menu(update)

# –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [['–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å', '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥']]
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return SERVICE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
async def choose_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    service = update.message.text
    context.user_data['service'] = service

    # –ü—Ä–∏–º–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ –ë–î)
    dates = ["2023-12-01", "2023-12-02", "2023-12-03"]
    keyboard = [[date] for date in dates]

    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return DATE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    date = update.message.text
    context.user_data['date'] = date

    # –ü—Ä–∏–º–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ –ë–î)
    times = ["10:00", "14:00", "18:00"]
    keyboard = [[time] for time in times]

    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return TIME


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    time = update.message.text
    context.user_data['time'] = time
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text
    context.user_data['name'] = name
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:')
    return PHONE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone = update.message.text
    user_data = context.user_data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO bookings 
        (user_id, service_type, date, time, name, phone)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (
        update.message.from_user.id,
        user_data['service'],
        user_data['date'],
        user_data['time'],
        user_data['name'],
        phone
    ))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    payment_info = """
üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*
–°–ë–ü: +7 999 123-45-67
–ë–∞–Ω–∫: –¢–∏–Ω—å–∫–æ—Ñ—Ñ
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–ü –ò–≤–∞–Ω–æ–≤ –ê.–ê.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
    """
    await update.message.reply_text(payment_info, parse_mode='Markdown')
    await show_main_menu(update)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = (
        "üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
        f"–£—Å–ª—É–≥–∞: {user_data['service']}\n"
        f"–î–∞—Ç–∞: {user_data['date']} {user_data['time']}\n"
        f"–ò–º—è: {user_data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    context.bot.send_message(chat_id='pashtetics', text=admin_message)
    context.user_data.clear()

    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    await show_main_menu(update)
    return ConversationHandler.END


# –ü–æ–∫–∞–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
async def show_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    payment_info = """
üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*
–°–ë–ü: +7 999 123-45-67
–ë–∞–Ω–∫: –¢–∏–Ω—å–∫–æ—Ñ—Ñ
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–ü –ò–≤–∞–Ω–æ–≤ –ê.–ê.
    """
    await update.message.reply_text(payment_info, parse_mode='Markdown')
    await show_main_menu(update)


# –ö–æ–Ω—Ç–∞–∫—Ç—ã
async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    contacts = """
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*
–ê–¥—Ä–µ—Å: —É–ª. –ì–æ–Ω—á–∞—Ä–Ω–∞—è, 15
–¢–µ–ª–µ—Ñ–æ–Ω: +7 495 123-45-67
–°–∞–π—Ç: artclay.ru
    """
    await update.message.reply_text(contacts, parse_mode='Markdown')
    await show_main_menu(update)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == 'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        await show_schedule(update, context)
    elif text == 'üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç':
        await show_prices(update, context)
    elif text == 'üí≥ –û–ø–ª–∞—Ç–∞':
        await show_payment(update, context)
    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await show_contacts(update, context)

async def main() -> None:
    init_db()

    # –°–æ–∑–¥–∞–µ–º Application
    application = ApplicationBuilder().token("8148657023:AAEIWjCxDqVgkqhDKjwRG4-cIJCylc--rV4").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.Regex('^(üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ|üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç|üí≥ –û–ø–ª–∞—Ç–∞|üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã)$'),
        handle_main_menu
    ))

    # Conversation Handler
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è$'), start_booking)],
        states={
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_service)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    if platform.system() == 'Windows':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    loop = asyncio.new_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        loop.close()